name: Publish Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version (e.g. 1.2.3, 1.2.3-beta.0)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Authenticate with npm
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Install dependencies
        run: npm ci

      - name: Bump version across all packages
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: |
          for dir in packages/*; do
            cd $dir
            npm version $VERSION --no-git-tag-version
            cd -
          done

          # обновляем внутренние зависимости на актуальную версию
          for dir in packages/*; do
            PKG_NAME=$(jq -r .name $dir/package.json)
            for inner in packages/*; do
              if grep -q "\"$PKG_NAME\"" $inner/package.json; then
                jq ".dependencies[\"$PKG_NAME\"] = \"$VERSION\"" $inner/package.json > $inner/package.tmp.json
                mv $inner/package.tmp.json $inner/package.json
              fi
            done
          done

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add packages/*/package.json
          git commit -m "chore(release): bump version to $VERSION" || echo "No changes"
          git tag v$VERSION
          git push origin HEAD:main --tags

      - name: Build packages
        run: |
          for dir in packages/*; do
            cd $dir
            if [ -f package.json ] && jq -e '.scripts.build' package.json > /dev/null; then
              npm run build
            fi
            cd -
          done

      - name: Publish packages in dependency order
        run: |
          echo "Resolving publish order..."
          # формируем список пакетов с зависимостями
          PKGS=$(for dir in packages/*; do jq -r ".name" $dir/package.json; done)
          
          publish_pkg() {
            local pkg=$1
            local dir=$2
            echo "Publishing $pkg from $dir"
            cd $dir
            npm publish --access public
            cd -
          }

          # простая сортировка: несколько проходов, публикуем только если все зависимости уже опубликованы
          published=""
          for i in {1..5}; do
            for dir in packages/*; do
              PKG_NAME=$(jq -r .name $dir/package.json)
              if [[ "$published" == *"$PKG_NAME"* ]]; then
                continue
              fi

              DEPS=$(jq -r '.dependencies // {} | keys[]' $dir/package.json || true)
              missing=false
              for dep in $DEPS; do
                if [[ "$PKGS" == *"$dep"* ]] && [[ "$published" != *"$dep"* ]]; then
                  missing=true
                fi
              done

              if [ "$missing" = false ]; then
                publish_pkg "$PKG_NAME" "$dir"
                published="$published $PKG_NAME"
              fi
            done
          done
