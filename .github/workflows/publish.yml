name: Publish Packages

on:
  workflow_run:
    workflows: ["CI"]   # имя CI workflow
    types:
      - completed

permissions:
  contents: write
  packages: write

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine merged branch
        id: merged_branch
        shell: bash
        run: |
          MERGED_REF="${GITHUB_HEAD_REF:-}"
          echo "$MERGED_REF"
          if [[ -z "$MERGED_REF" ]]; then
            echo "No release branch merged, stopping workflow."
            echo "run_publish=false" >> $GITHUB_ENV
          elif [[ "$MERGED_REF" == release/* ]]; then
            echo "Merged branch: $MERGED_REF"
            echo "run_publish=true" >> $GITHUB_ENV
            echo "RELEASE_BRANCH=$MERGED_REF" >> $GITHUB_ENV
          else
            echo "Merged branch '$MERGED_REF' is not release/*, stopping workflow."
            echo "run_publish=false" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        if: env.run_publish == 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Authenticate with npm
        if: env.run_publish == 'true'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Install dependencies
        if: env.run_publish == 'true'
        run: npm ci

      - name: Build packages
        if: env.run_publish == 'true'
        run: |
          for dir in packages/*; do
            cd $dir
            if [ -f package.json ] && jq -e '.scripts.build' package.json > /dev/null; then
              echo "🔹 Building $(jq -r .name package.json)..."
              npm run build
            fi
            cd -
          done

      - name: Replace workspace:* with actual version
        if: env.run_publish == 'true'
        run: |
          VERSION=$(jq -r .version packages/*/package.json | head -n1)
          echo "🔹 Replacing workspace:* with version $VERSION..."
          for pkg_dir in packages/*; do
            for dep_dir in packages/*; do
              DEP_NAME=$(jq -r .name "$dep_dir/package.json")
              for DEP_TYPE in dependencies devDependencies peerDependencies; do
                if jq -e ".${DEP_TYPE}[\"$DEP_NAME\"]" "$pkg_dir/package.json" > /dev/null; then
                  jq ".${DEP_TYPE}[\"$DEP_NAME\"] = \"$VERSION\"" "$pkg_dir/package.json" > "$pkg_dir/package.tmp.json"
                  mv "$pkg_dir/package.tmp.json" "$pkg_dir/package.json"
                fi
              done
            done
          done

      - name: Publish packages in order
        if: env.run_publish == 'true'
        run: |
          echo "🚀 Publishing packages..."
          published=""
          for i in {1..5}; do
            for dir in packages/*; do
              PKG_NAME=$(jq -r .name $dir/package.json)
              if [[ "$published" == *"$PKG_NAME"* ]]; then
                continue
              fi

              DEPS=$(jq -r '.dependencies // {} | keys[]' $dir/package.json || true)
              missing=false
              for dep in $DEPS; do
                if [[ "$published" != *"$dep"* ]] && [[ -d "packages/$dep" ]]; then
                  missing=true
                fi
              done

              if [ "$missing" = false ]; then
                cd $dir
                npm publish --access public
                cd -
                published="$published $PKG_NAME"
              fi
            done
          done

      - name: Create git tag and GitHub release
        if: env.run_publish == 'true'
        run: |
          VERSION=$(jq -r .version packages/*/package.json | head -n1)
          echo "Creating git tag v$VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v$VERSION -m "Release v$VERSION"
          git push origin v$VERSION
