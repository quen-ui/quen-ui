name: Publish Packages

on:
  workflow_run:
    workflows: ["Lint & Test"]
    types:
      - completed

permissions:
  contents: write
  packages: write

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine merged branch
        id: merged_branch
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "Event: $GITHUB_EVENT_NAME"
          MERGED_REF=""

          # 1) Если workflow запущен через workflow_run (после CI)
          if [ -f "${GITHUB_EVENT_PATH:-/dev/null}" ]; then
            branch=$(jq -r '(.workflow_run.head_branch // .pull_request.head.ref // "")' "$GITHUB_EVENT_PATH")
            if [ -n "$branch" ] && [ "$branch" != "null" ]; then
              MERGED_REF="$branch"
              echo "Found via event payload: $MERGED_REF"
            fi
          fi

          # 2) Если это merge commit, достаём из commit message
          if [ -z "$MERGED_REF" ]; then
            commit_msg="$(git log -1 --pretty=%B || true)"
            echo "Commit message: $commit_msg"
            if [[ "$commit_msg" =~ Merge\ pull\ request\ #[0-9]+\ from\ [^/]+/(release/[^[:space:]]+) ]]; then
              MERGED_REF="${BASH_REMATCH[1]}"
              echo "Found via commit message: $MERGED_REF"
            fi
          fi

          # 3) Фоллбек: через GitHub API
          if [ -z "$MERGED_REF" ]; then
            prs=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
                        -H "Accept: application/vnd.github.groot-preview+json" \
                        "https://api.github.com/repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA}/pulls")
            branch=$(echo "$prs" | jq -r '.[0].head.ref // empty')
            if [ -n "$branch" ]; then
              MERGED_REF="$branch"
              echo "Found via GitHub API: $MERGED_REF"
            fi
          fi

          # Решение
          if [ -z "$MERGED_REF" ]; then
            echo "❌ Could not detect merged branch."
            echo "run_publish=false" >> $GITHUB_ENV
          elif [[ "$MERGED_REF" == release/* ]]; then
            echo "✅ Release branch detected: $MERGED_REF"
            echo "run_publish=true" >> $GITHUB_ENV
            echo "RELEASE_BRANCH=$MERGED_REF" >> $GITHUB_ENV
          else
            echo "ℹ️ Merged branch '$MERGED_REF' is not release/*"
            echo "run_publish=false" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        if: env.run_publish == 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Authenticate with npm
        if: env.run_publish == 'true'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Install dependencies
        if: env.run_publish == 'true'
        run: npm ci

      - name: Build packages
        if: env.run_publish == 'true'
        run: |
          for dir in packages/*; do
            cd $dir
            if [ -f package.json ] && jq -e '.scripts.build' package.json > /dev/null; then
              echo "🔹 Building $(jq -r .name package.json)..."
              npm run build
            fi
            cd - >/dev/null
          done

      - name: Publish packages (workspace-aware)
        if: env.run_publish == 'true'
        run: |
          echo "🚀 Publishing packages..."
          npm publish --workspaces --access public

      - name: Create git tag and GitHub release
        if: env.run_publish == 'true'
        run: |
          VERSION=$(jq -r .version packages/*/package.json | head -n1)
          echo "Creating git tag v$VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a v$VERSION -m "Release v$VERSION"
          git push origin v$VERSION
