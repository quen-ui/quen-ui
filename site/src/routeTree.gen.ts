/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ThemingRouteRouteImport } from './routes/theming/route'
import { Route as HooksRouteRouteImport } from './routes/hooks/route'
import { Route as GuidesRouteRouteImport } from './routes/guides/route'
import { Route as ComponentsRouteRouteImport } from './routes/components/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ThemingSlugRouteImport } from './routes/theming/$slug'
import { Route as HooksSlugRouteImport } from './routes/hooks/$slug'
import { Route as GuidesSlugRouteImport } from './routes/guides/$slug'
import { Route as ComponentsSlugRouteImport } from './routes/components/$slug'

const ThemingRouteRoute = ThemingRouteRouteImport.update({
  id: '/theming',
  path: '/theming',
  getParentRoute: () => rootRouteImport,
} as any)
const HooksRouteRoute = HooksRouteRouteImport.update({
  id: '/hooks',
  path: '/hooks',
  getParentRoute: () => rootRouteImport,
} as any)
const GuidesRouteRoute = GuidesRouteRouteImport.update({
  id: '/guides',
  path: '/guides',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsRouteRoute = ComponentsRouteRouteImport.update({
  id: '/components',
  path: '/components',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ThemingSlugRoute = ThemingSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => ThemingRouteRoute,
} as any)
const HooksSlugRoute = HooksSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => HooksRouteRoute,
} as any)
const GuidesSlugRoute = GuidesSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => GuidesRouteRoute,
} as any)
const ComponentsSlugRoute = ComponentsSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => ComponentsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/components': typeof ComponentsRouteRouteWithChildren
  '/guides': typeof GuidesRouteRouteWithChildren
  '/hooks': typeof HooksRouteRouteWithChildren
  '/theming': typeof ThemingRouteRouteWithChildren
  '/components/$slug': typeof ComponentsSlugRoute
  '/guides/$slug': typeof GuidesSlugRoute
  '/hooks/$slug': typeof HooksSlugRoute
  '/theming/$slug': typeof ThemingSlugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/components': typeof ComponentsRouteRouteWithChildren
  '/guides': typeof GuidesRouteRouteWithChildren
  '/hooks': typeof HooksRouteRouteWithChildren
  '/theming': typeof ThemingRouteRouteWithChildren
  '/components/$slug': typeof ComponentsSlugRoute
  '/guides/$slug': typeof GuidesSlugRoute
  '/hooks/$slug': typeof HooksSlugRoute
  '/theming/$slug': typeof ThemingSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/components': typeof ComponentsRouteRouteWithChildren
  '/guides': typeof GuidesRouteRouteWithChildren
  '/hooks': typeof HooksRouteRouteWithChildren
  '/theming': typeof ThemingRouteRouteWithChildren
  '/components/$slug': typeof ComponentsSlugRoute
  '/guides/$slug': typeof GuidesSlugRoute
  '/hooks/$slug': typeof HooksSlugRoute
  '/theming/$slug': typeof ThemingSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/components'
    | '/guides'
    | '/hooks'
    | '/theming'
    | '/components/$slug'
    | '/guides/$slug'
    | '/hooks/$slug'
    | '/theming/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/components'
    | '/guides'
    | '/hooks'
    | '/theming'
    | '/components/$slug'
    | '/guides/$slug'
    | '/hooks/$slug'
    | '/theming/$slug'
  id:
    | '__root__'
    | '/'
    | '/components'
    | '/guides'
    | '/hooks'
    | '/theming'
    | '/components/$slug'
    | '/guides/$slug'
    | '/hooks/$slug'
    | '/theming/$slug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComponentsRouteRoute: typeof ComponentsRouteRouteWithChildren
  GuidesRouteRoute: typeof GuidesRouteRouteWithChildren
  HooksRouteRoute: typeof HooksRouteRouteWithChildren
  ThemingRouteRoute: typeof ThemingRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/theming': {
      id: '/theming'
      path: '/theming'
      fullPath: '/theming'
      preLoaderRoute: typeof ThemingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hooks': {
      id: '/hooks'
      path: '/hooks'
      fullPath: '/hooks'
      preLoaderRoute: typeof HooksRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guides': {
      id: '/guides'
      path: '/guides'
      fullPath: '/guides'
      preLoaderRoute: typeof GuidesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components': {
      id: '/components'
      path: '/components'
      fullPath: '/components'
      preLoaderRoute: typeof ComponentsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/theming/$slug': {
      id: '/theming/$slug'
      path: '/$slug'
      fullPath: '/theming/$slug'
      preLoaderRoute: typeof ThemingSlugRouteImport
      parentRoute: typeof ThemingRouteRoute
    }
    '/hooks/$slug': {
      id: '/hooks/$slug'
      path: '/$slug'
      fullPath: '/hooks/$slug'
      preLoaderRoute: typeof HooksSlugRouteImport
      parentRoute: typeof HooksRouteRoute
    }
    '/guides/$slug': {
      id: '/guides/$slug'
      path: '/$slug'
      fullPath: '/guides/$slug'
      preLoaderRoute: typeof GuidesSlugRouteImport
      parentRoute: typeof GuidesRouteRoute
    }
    '/components/$slug': {
      id: '/components/$slug'
      path: '/$slug'
      fullPath: '/components/$slug'
      preLoaderRoute: typeof ComponentsSlugRouteImport
      parentRoute: typeof ComponentsRouteRoute
    }
  }
}

interface ComponentsRouteRouteChildren {
  ComponentsSlugRoute: typeof ComponentsSlugRoute
}

const ComponentsRouteRouteChildren: ComponentsRouteRouteChildren = {
  ComponentsSlugRoute: ComponentsSlugRoute,
}

const ComponentsRouteRouteWithChildren = ComponentsRouteRoute._addFileChildren(
  ComponentsRouteRouteChildren,
)

interface GuidesRouteRouteChildren {
  GuidesSlugRoute: typeof GuidesSlugRoute
}

const GuidesRouteRouteChildren: GuidesRouteRouteChildren = {
  GuidesSlugRoute: GuidesSlugRoute,
}

const GuidesRouteRouteWithChildren = GuidesRouteRoute._addFileChildren(
  GuidesRouteRouteChildren,
)

interface HooksRouteRouteChildren {
  HooksSlugRoute: typeof HooksSlugRoute
}

const HooksRouteRouteChildren: HooksRouteRouteChildren = {
  HooksSlugRoute: HooksSlugRoute,
}

const HooksRouteRouteWithChildren = HooksRouteRoute._addFileChildren(
  HooksRouteRouteChildren,
)

interface ThemingRouteRouteChildren {
  ThemingSlugRoute: typeof ThemingSlugRoute
}

const ThemingRouteRouteChildren: ThemingRouteRouteChildren = {
  ThemingSlugRoute: ThemingSlugRoute,
}

const ThemingRouteRouteWithChildren = ThemingRouteRoute._addFileChildren(
  ThemingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComponentsRouteRoute: ComponentsRouteRouteWithChildren,
  GuidesRouteRoute: GuidesRouteRouteWithChildren,
  HooksRouteRoute: HooksRouteRouteWithChildren,
  ThemingRouteRoute: ThemingRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
